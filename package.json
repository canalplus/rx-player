{
  "name": "rx-player",
  "author": "Canal+",
  "version": "3.8.1",
  "description": "Canal+ HTML5 Video Player",
  "main": "./dist/rx-player.js",
  "keywords": [
    "dash",
    "eme",
    "hss",
    "html5",
    "mediasource",
    "mse",
    "reactive",
    "rx",
    "rxjs",
    "smooth",
    "streaming",
    "typescript",
    "video"
  ],
  "browser": "./dist/rx-player.js",
  "homepage": "https://github.com/canalplus/rx-player",
  "bugs": "https://github.com/canalplus/rx-player/issues",
  "license": "Apache-2.0",
  "sideEffects": false,
  "scripts-info": {
    "build": "Build the player in dist/rx-player.js",
    "build:all": "Perform all possible builds of the player (build, build:min and build:modular)",
    "build:min": "Build the player and minify it in dist/rx-player.min.js",
    "build:modular": "Build the modular build of the rx-player and create corresponding files and directories.",
    "build:report": "Build the player in dist/rx-player.js and display a report on its size",
    "build:min:report": "Build the player then minify it in dist/rx-player.min.js and display a report on its size",
    "build:watch": "Build the player in dist/rx-player.js each times the files update",
    "certificate": "Generate a certificate to be able to use HTTPS locally for the demo pages (`npm run start` and `npm run standalone` will then listen to HTTPS requests through a communicated port)",
    "check": "Check the validity of the src directory by running the linter, type checker and every tests",
    "demo": "Build the demo in demo/bundle.js",
    "demo:min": "Build the demo and minify it in demo/bundle.js",
    "demo:watch": "Build the demo in demo/bundle.js each times the files update.",
    "doc": "Generate the HTML documentation in doc/pages",
    "info": "Display the description of all npm scripts for this project",
    "lint": "Lint rx-player source files",
    "lint:demo": "Lint demo source files",
    "lint:tests": "Lint integration tests source files",
    "standalone": "Build and launch the \"standalone\" demo (without any UI) on a local server. Re-build on file updates.",
    "start": "Build and launch the \"full\" demo (with a UI) on a local server. Re-build on file updates.",
    "test": "Launch unit and integration tests in multiple browser environments",
    "test:chrome": "Launch unit and integration tests in a Chrome browser.",
    "test:coverage": "Launch unit and integration tests in multiple browser environments and build a test coverage report.",
    "test:firefox": "Launch unit and integration tests in a Firefox browser.",
    "test:integration": "Launch integration tests in multiple browser environments",
    "test:integration:chrome": "Launch integration tests in a Chrome browser.",
    "test:integration:chrome:watch": "Launch integration tests in Chrome each times the files update",
    "test:integration:firefox": "Launch integration tests in a Firefox browser.",
    "test:integration:firefox:watch": "Launch integration tests in Firefox each times the files update",
    "test:integration:watch": "Launch integration tests in multiple browser environments each times the files update",
    "test:memory": "Launch memory tests",
    "test:memory:chrome:watch": "Launch memory tests in Chrome each times the files update",
    "test:unit": "Launch unit tests in multiple browser environments",
    "test:unit:chrome": "Launch unit tests in a Chrome browser.",
    "test:unit:chrome:watch": "Launch unit tests in Chrome each times the files update",
    "test:unit:firefox": "Launch unit tests in a Firefox browser.",
    "test:unit:firefox:watch": "Launch unit tests in Firefox each times the files update",
    "test:unit:watch": "Launch unit tests in multiple browser environments each times the files update",
    "test:watch": "Launch every tests in multiple browser environments each times the files update",
    "types": "Check TypeScript typings in src",
    "update-version": "Update the version to the string given in argument (example: `npm run n pdate-version 3.8.0`). Will update the codebase and perform every builds."
  },
  "scripts": {
    "build": "webpack --progress --config webpack.config.js",
    "build:all": "npm run build && npm run build:min && npm run build:modular",
    "build:min": "cross-env RXP_MINIFY=true webpack --progress --config webpack.config.js",
    "build:modular": "./scripts/generate_builds",
    "build:report": "cross-env RXP_SIZE_REPORT=true webpack --progress --config webpack.config.js",
    "build:min:report": "cross-env RXP_SIZE_REPORT=true cross-env RXP_MINIFY=true webpack --progress --config webpack.config.js",
    "build:watch": "webpack --progress --config webpack.config.js -w",
    "certificate": "./scripts/generate_certificate",
    "check": "npm run types && npm run lint && npm run test",
    "demo": "webpack --progress --config webpack-demo.config.js",
    "demo:min": "cross-env RXP_MINIFY=true webpack --progress --config webpack-demo.config.js",
    "demo:watch": "webpack --progress --config webpack-demo.config.js -w",
    "doc": "rm -rf doc/generated; node ./scripts/doc-generator/index.js doc/ doc/generated",
    "info": "npm-scripts-info",
    "lint": "tslint --project . -c tslint.json \"src/**/*.ts\"",
    "lint:demo": "eslint demo/**/*.js demo/**/*.jsx",
    "lint:tests": "eslint tests/**/*.js",
    "prepare:modular": "tsc -p tsconfig.modules.json",
    "prepublish": "npm run build:modular",
    "standalone": "cross-env RXP_ENV=development node ./demo/standalone/server.js",
    "start": "cross-env RXP_ENV=development node ./demo/full/server.js",
    "test": "karma start tests/karma.conf.js",
    "test:chrome": "karma start tests/karma.conf.js --browsers Chrome",
    "test:coverage": "cross-env RXP_COVERAGE=true karma start tests/karma.conf.js --browsers Chrome,Firefox",
    "test:firefox": "karma start tests/karma.conf.js --browsers Firefox",
    "test:integration": "karma start tests/integration/karma.conf.js",
    "test:integration:chrome": "karma start tests/integration/karma.conf.js --browsers Chrome",
    "test:integration:chrome:watch": "cross-env RXP_TESTS_WATCH=true karma start tests/integration/karma.conf.js --browsers Chrome",
    "test:integration:firefox": "karma start tests/integration/karma.conf.js --browsers Firefox",
    "test:integration:firefox:watch": "cross-env RXP_TESTS_WATCH=true karma start tests/integration/karma.conf.js --browsers Firefox",
    "test:integration:watch": "cross-env RXP_TESTS_WATCH=true karma start tests/integration/karma.conf.js",
    "test:memory": "karma start tests/memory/karma.conf.js",
    "test:memory:chrome:watch": "cross-env RXP_TESTS_WATCH=true karma start tests/memory/karma.conf.js --browsers ChromeMemory",
    "test:unit": "karma start tests/unit/karma.conf.js",
    "test:unit:chrome": "karma start tests/unit/karma.conf.js --browsers Chrome",
    "test:unit:chrome:watch": "cross-env RXP_TESTS_WATCH=true karma start tests/unit/karma.conf.js --browsers Chrome",
    "test:unit:firefox": "karma start tests/unit/karma.conf.js --browsers Firefox",
    "test:unit:firefox:watch": "cross-env RXP_TESTS_WATCH=true karma start tests/unit/karma.conf.js --browsers Firefox",
    "test:unit:watch": "cross-env RXP_TESTS_WATCH=true karma start tests/unit/karma.conf.js",
    "test:watch": "cross-env RXP_TESTS_WATCH=true karma start tests/karma.conf.js",
    "types": "tsc --noEmit --project .",
    "update-version": "npm run version --git-tag-version=false",
    "version": "./scripts/update-version"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/canalplus/rx-player.git"
  },
  "dependencies": {
    "array-find": "^1.0.0",
    "array-find-index": "^1.0.2",
    "deep-equal": "^1.0.1",
    "next-tick": "^1.0.0",
    "object-assign": "^4.1.1",
    "rxjs": "^6.3.3"
  },
  "devDependencies": {
    "@babel/core": "^7.1.2",
    "@babel/polyfill": "^7.0.0",
    "@babel/preset-env": "^7.1.0",
    "@babel/preset-react": "^7.0.0",
    "@types/chai": "^4.1.6",
    "@types/chai-as-promised": "^7.1.0",
    "@types/chai-spies": "^1.0.0",
    "@types/deep-equal": "^1.0.1",
    "@types/mocha": "^5.2.5",
    "@types/node": "^10.11.6",
    "@types/sinon": "^5.0.5",
    "@types/sinon-chai": "^3.2.0",
    "arraybuffer-loader": "^1.0.6",
    "babel-loader": "^8.0.4",
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "chai-spies": "^1.0.0",
    "chart.js": "^2.7.2",
    "cheerio": "^1.0.0-rc.2",
    "cross-env": "^5.2.0",
    "css-loader": "^1.0.0",
    "eslint": "^5.6.1",
    "eslint-plugin-react": "^7.11.1",
    "express": "^4.16.3",
    "file-loader": "^2.0.0",
    "highlight.js": "^9.12.0",
    "istanbul-instrumenter-loader": "^3.0.1",
    "jsx-loader": "^0.13.2",
    "karma": "^3.0.0",
    "karma-chrome-launcher": "^2.2.0",
    "karma-coverage": "^1.1.2",
    "karma-firefox-launcher": "^1.1.0",
    "karma-mocha": "^1.3.0",
    "karma-mocha-reporter": "^2.2.5",
    "karma-webpack": "^3.0.5",
    "lodash": "^4.17.11",
    "markdown-it": "^8.4.2",
    "markdown-it-emoji": "^1.4.0",
    "mocha": "^5.2.0",
    "mocha-loader": "^2.0.0",
    "npm-scripts-info": "^0.3.9",
    "raw-loader": "^0.5.1",
    "react": "^16.5.2",
    "react-dom": "^16.5.2",
    "sinon": "^6.3.5",
    "sinon-chai": "^3.2.0",
    "style-loader": "^0.23.1",
    "ts-loader": "^5.2.1",
    "tslint": "^5.11.0",
    "typescript": "^3.1.2",
    "uglifyjs-webpack-plugin": "^2.0.1",
    "url-loader": "^1.1.2",
    "webpack": "^4.20.2",
    "webpack-bundle-analyzer": "^3.0.2",
    "webpack-cli": "^3.1.2"
  }
}
