{
  "name": "rx-player",
  "author": "Canal+",
  "version": "4.2.0-dev.2024100200",
  "description": "Canal+ HTML5 Video Player",
  "main": "./dist/commonjs/index.js",
  "module": "./dist/es2017/index.js",
  "browser": "./dist/es2017/index.js",
  "exports": {
    ".": {
      "import": "./dist/es2017/index.js",
      "require": "./dist/commonjs/index.js",
      "default": "./dist/es2017/index.js"
    },
    "./experimental": {
      "import": "./dist/es2017/experimental/index.js",
      "require": "./dist/commonjs/experimental/index.js",
      "default": "./dist/es2017/experimental/index.js"
    },
    "./experimental/config": {
      "import": "./dist/es2017/config.js",
      "require": "./dist/commonjs/config.js",
      "default": "./dist/es2017/config.js"
    },
    "./experimental/features": {
      "import": "./dist/es2017/experimental/features/index.js",
      "require": "./dist/commonjs/experimental/features/index.js",
      "default": "./dist/es2017/experimental/features/index.js"
    },
    "./experimental/features/embeds": {
      "import": "./dist/es2017/__GENERATED_CODE/index.js",
      "require": "./dist/commonjs/__GENERATED_CODE/index.js",
      "default": "./dist/es2017/__GENERATED_CODE/index.js"
    },
    "./experimental/features/*": {
      "import": "./dist/es2017/experimental/features/*.js",
      "require": "./dist/commonjs/experimental/features/*.js",
      "default": "./dist/es2017/experimental/features/*.js"
    },
    "./experimental/tools": {
      "import": "./dist/es2017/experimental/tools/index.js",
      "require": "./dist/commonjs/experimental/tools/index.js",
      "default": "./dist/es2017/experimental/tools/index.js"
    },
    "./experimental/tools/*": {
      "import": "./dist/es2017/experimental/tools/*/index.js",
      "require": "./dist/commonjs/experimental/tools/*/index.js",
      "default": "./dist/es2017/experimental/tools/*/index.js"
    },
    "./features": {
      "import": "./dist/es2017/features/list/index.js",
      "require": "./dist/commonjs/features/list/index.js",
      "default": "./dist/es2017/features/list/index.js"
    },
    "./features/*": {
      "import": "./dist/es2017/features/list/*.js",
      "require": "./dist/commonjs/features/list/*.js",
      "default": "./dist/es2017/features/list/*.js"
    },
    "./logger": {
      "import": "./dist/es2017/log.js",
      "require": "./dist/commonjs/log.js",
      "default": "./dist/es2017/log.js"
    },
    "./minimal": {
      "import": "./dist/es2017/minimal.js",
      "require": "./dist/commonjs/minimal.js",
      "default": "./dist/es2017/minimal.js"
    },
    "./tools": {
      "import": "./dist/es2017/tools/index.js",
      "require": "./dist/commonjs/tools/index.js",
      "default": "./dist/es2017/tools/index.js"
    },
    "./tools/*": {
      "import": "./dist/es2017/tools/*/index.js",
      "require": "./dist/commonjs/tools/*/index.js",
      "default": "./dist/es2017/tools/*/index.js"
    },
    "./types": {
      "import": "./dist/es2017/public_types.js",
      "require": "./dist/commonjs/public_types.js",
      "default": "./dist/es2017/public_types.js"
    },
    "./package.json": "./package.json"
  },
  "typesVersions": {
    "*": {
      "experimental": [
        "./dist/es2017/experimental/index.d.ts"
      ],
      "experimental/features": [
        "./dist/es2017/experimental/features/index.d.ts"
      ],
      "experimental/features/embeds": [
        "./dist/es2017/__GENERATED_CODE/index.d.ts"
      ],
      "experimental/features/*": [
        "./dist/es2017/experimental/features/*.d.ts"
      ],
      "experimental/tools": [
        "./dist/es2017/experimental/tools/index.d.ts"
      ],
      "experimental/tools/*": [
        "./dist/es2017/experimental/tools/*/index.d.ts"
      ],
      "features": [
        "./dist/es2017/features/list/index.d.ts"
      ],
      "features/*": [
        "./dist/es2017/features/list/*.d.ts"
      ],
      "logger": [
        "./dist/es2017/log.d.ts"
      ],
      "minimal": [
        "./dist/es2017/minimal.d.ts"
      ],
      "tools": [
        "./dist/es2017/tools/index.d.ts"
      ],
      "tools/*": [
        "./dist/es2017/tools/*/index.d.ts"
      ],
      "types": [
        "./dist/es2017/public_types.d.ts"
      ]
    }
  },
  "keywords": [
    "dash",
    "eme",
    "hss",
    "html5",
    "mediasource",
    "mse",
    "reactive",
    "smooth",
    "streaming",
    "typescript",
    "video"
  ],
  "homepage": "https://github.com/canalplus/rx-player",
  "bugs": "https://github.com/canalplus/rx-player/issues",
  "license": "Apache-2.0",
  "sideEffects": false,
  "scripts": {
    "build": "./scripts/generate_build.mjs",
    "build:noCheck": "./scripts/generate_build.mjs --no-check",
    "build:all": "npm run clean:build && npm run build:wasm:release && npm run bundle && npm run bundle:min && npm run build",
    "build:dev": "./scripts/generate_build.mjs --dev-mode",
    "build:dev:noCheck": "./scripts/generate_build.mjs --dev-mode --no-check",
    "build:wasm:debug": "mkdir -p dist && cd ./src/parsers/manifest/dash/wasm-parser && cargo build --target wasm32-unknown-unknown && cp target/wasm32-unknown-unknown/debug/mpd_node_parser.wasm ../../../../../dist/mpd-parser.wasm",
    "build:wasm:release": "./scripts/build_wasm_release.sh",
    "bundle": "./scripts/run_bundler.mjs src/index.ts --production-mode --globals -o dist/rx-player.js",
    "bundle:min": "./scripts/run_bundler.mjs src/index.ts --production-mode --globals -o dist/rx-player.min.js --minify",
    "bundle:min:watch": "./scripts/run_bundler.mjs src/index.ts --production-mode --globals -o dist/rx-player.min.js --minify --watch",
    "bundle:watch": "./scripts/run_bundler.mjs src/index.ts --production-mode --globals -o dist/rx-player.js --watch",
    "certificate": "./scripts/generate_certificate",
    "check": "npm run check:types && npm run lint && npm run check:types:unit_tests",
    "check:all": "npm run check:types && npm run lint && npm run lint:demo && npm run lint:tests && npm run lint:scripts && npm run test:unit && npm run test:integration && npm run test:memory && node -r esm ./scripts/check_nodejs_import_compatibility.js",
    "check:demo": "npm run check:demo:types && npm run lint:demo",
    "check:demo:types": "tsc --noEmit --project demo/",
    "clean:build": "scripts/utils/remove_dir.mjs dist",
    "check:types": "tsc --noEmit --project .",
    "check:types:unit_tests": "tsc --noEmit --project ./tsconfig.unit-tests.json",
    "check:types:watch": "tsc --noEmit --watch --project .",
    "clean:wasm": "scripts/utils/remove_dir.mjs dist/mpd-parser.wasm && scripts/utis/remove_dir.mjs ./src/parsers/manifest/dash/wasm-parser/target",
    "demo": "node ./scripts/build_demo.mjs --production-mode",
    "demo:min": "node ./scripts/build_demo.mjs --production-mode --minify",
    "demo:watch": "node ./scripts/build_demo.mjs --watch --production-mode",
    "doc": "readme.doc --clean --input doc/ --output doc/generated -p \"$(cat VERSION)\"",
    "fmt:prettier": "prettier --write .",
    "fmt:prettier:check": "prettier . --check",
    "fmt:rust": "cd ./src/parsers/manifest/dash/wasm-parser && cargo fmt",
    "fmt:rust:check": "cd ./src/parsers/manifest/dash/wasm-parser && cargo fmt --check",
    "lint": "eslint src -c .eslintrc.js",
    "lint:demo": "eslint -c demo/.eslintrc.js demo/scripts",
    "lint:scripts": "eslint -c scripts/.eslintrc.js --ext .js --ext .mjs --ext .cjs scripts",
    "lint:tests": "eslint tests/**/*.js --ignore-pattern '/tests/performance/bundle*'",
    "list": "node scripts/list-npm-scripts.mjs",
    "prepublishOnly": "npm run build:all",
    "releases:changelog": "./scripts/update_changelog.mjs",
    "releases:demo": "./scripts/update_gh-pages_demo",
    "releases:dev": "./scripts/make-dev-releases",
    "releases:doc": "./scripts/update_gh-pages_doc",
    "releases:official": "./scripts/make-official-release.sh",
    "start": "node ./scripts/start_demo_web_server.mjs",
    "start:wasm": "node ./scripts/start_demo_web_server.mjs --include-wasm",
    "test:integration": "npm run test:integration:chrome && npm run test:integration:firefox",
    "test:integration:chrome": "cross-env BROWSER_CONFIG=chrome vitest run tests/integration/scenarios",
    "test:integration:chrome:watch": "cross-env BROWSER_CONFIG=chrome vitest watch tests/integration/scenarios",
    "test:integration:firefox": "cross-env BROWSER_CONFIG=firefox vitest run tests/integration/scenarios",
    "test:integration:firefox:watch": "cross-env BROWSER_CONFIG=firefox vitest watch tests/integration/scenarios",
    "test:memory": "cross-env BROWSER_CONFIG=chrome vitest run tests/memory",
    "test:memory:chrome:watch": "cross-env BROWSER_CONFIG=chrome vitest watch tests/memory",
    "test:unit": "vitest --config vitest.config.unit.mjs",
    "test:unit:watch": "cross-env WATCH=true vitest --config vitest.config.unit.mjs",
    "update-version": "npm run version --git-tag-version=false",
    "version": "./scripts/update-version",
    "wasm-strip": "node scripts/wasm-strip.mjs dist/mpd-parser.wasm"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/canalplus/rx-player.git"
  },
  "devDependencies": {
    "@canalplus/readme.doc": "0.5.0",
    "@types/react": "18.3.8",
    "@types/react-dom": "18.3.0",
    "@typescript-eslint/eslint-plugin": "^8.7.0",
    "@typescript-eslint/parser": "^8.7.0",
    "@vitest/browser": "^2.1.1",
    "core-js": "3.38.1",
    "cross-env": "^7.0.3",
    "esbuild": "0.24.0",
    "eslint": "8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-ban": "1.6.0",
    "eslint-plugin-import": "2.30.0",
    "eslint-plugin-jsdoc": "50.2.4",
    "eslint-plugin-react": "7.36.1",
    "esm": "3.2.25",
    "github-buttons": "2.29.0",
    "html-entities": "2.5.2",
    "jsdom": "^25.0.1",
    "prettier": "^3.3.3",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "regenerator-runtime": "0.14.1",
    "semver": "7.6.3",
    "typescript": "5.6.2",
    "vitest": "2.1.1",
    "webdriverio": "9.1.0"
  },
  "scripts-list": {
    "Build a demo page (e.g. to test a code change)": {
      "start": "Build the demo with the non-minified RxPlayer and serve it on a local server. Re-build on file updates.",
      "start:wasm": "Build the demo with the non-minified RxPlayer including the DASH WebAssembly MPD parser and serve it on a local server. Re-build on file updates.",
      "demo": "Build the demo in demo/bundle.js",
      "demo:min": "Build the demo and minify it in demo/bundle.js",
      "demo:watch": "Build the demo in demo/bundle.js each times the files update.",
      "check:demo": "Check the validity of the demo directory by running the type checker and linter on it",
      "check:demo:types": "Check TypeScript types in demo files",
      "lint:demo": "Run linter on demo files",
      "certificate": "Generate a certificate to be able to use HTTPS locally for the demo pages (`npm run start` will then listen to HTTPS requests through a communicated port)",
      "releases:demo": "Publish current demo as the GitHub's pages new demo page (\"stable\" branch only)"
    },
    "Type-check, format, or lint the current code": {
      "check": "Check the validity of the src directory by running the type checker and linter on it",
      "check:all": "Check the validity of the whole project by running linters, type checkers and every tests",
      "check:types": "Check TypeScript typings in src",
      "check:types:watch": "Check TypeScript typings in src each time files change",
      "lint": "Lint rx-player source files",
      "lint:demo": "Lint demo source files",
      "lint:tests": "Lint integration tests source files",
      "fmt:prettier": "Automatically format JavaScript, TypeScript, JSON, XML, HTML, YML and Markdown files",
      "fmt:prettier:check": "Check that JavaScript, TypeScript, JSON, XML, HTML, YML and Markdown files are well-formatted",
      "fmt:rust": "Automatically format Rust files",
      "fmt:rust:check": "Check that Rust files are well-formatted"
    },
    "Run tests": {
      "Integration tests (test the whole API, ensure the RxPlayer build is made BEFORE running them)": {
        "test:integration": "Launch integration tests in multiple browser environments",
        "test:integration:chrome": "Launch integration tests in a Chrome browser.",
        "test:integration:chrome:watch": "Launch integration tests in Chrome each times the files update",
        "test:integration:firefox": "Launch integration tests in a Firefox browser.",
        "test:integration:firefox:watch": "Launch integration tests in Firefox each times the files update"
      },
      "Unit tests (test particular functions)": {
        "test:unit": "Launch unit tests",
        "test:unit:watch": "Launch unit tests and restart them each one of its file changes"
      },
      "Memory tests (test memory usage to avoid memory leaks)": {
        "test:memory": "Launch memory tests",
        "test:memory:chrome:watch": "Launch memory tests in Chrome each times the files update"
      }
    },
    "Build the player or one of its sub-parts": {
      "Regular builds (used by JS bundlers)": {
        "build": "Build the rx-player code in release mode",
        "build:dev": "Build the rx-player code in development mode (more runtime checks, non-minified worker)",
        "build:noCheck": "Build the rx-player code in release mode without performing compile-time type checks",
        "build:dev:noCheck": "Build the rx-player code in development mode (more runtime checks, non-minified worker) without performing compile-time type checks"
      },
      "Legacy bundle builds (single-file bundles exporting to window.RxPlayer)": {
        "bundle": "Build the player in dist/rx-player.js",
        "bundle:min": "Build the player and minify it in dist/rx-player.min.js",
        "bundle:min:watch": "Build the player in dist/rx-player.js each times the files update",
        "bundle:watch": "Build the player as a minified version in dist/rx-player.min.js each times the files update"
      },
      "WebAssembly MPD parser builds (needs Rust, Cargo and binaryen)": {
        "build:wasm:debug": "Build the DASH MPD parser written in rust as WebAssembly into debug mode, and output the result as dist/mpd-parser.wasm",
        "build:wasm:release": "Build the DASH MPD parser written in rust as WebAssembly into release mode, and output the result as dist/mpd-parser.wasm"
      },
      "Combinations of multiple builds": {
        "build:all": "Perform all possible builds of the player (regular RxPlayer builds, legacy bundles and the WebAssembly DASH MPD parser release build)."
      }
    },
    "Build the documentation pages": {
      "doc": "Generate the HTML documentation in doc/generated/pages",
      "releases:doc": "Publish current documentation as the GitHub's pages new documentation pages (\"stable\" branch only)"
    },
    "Make a release": {
      "releases:dev": "Produce dev npm releases (which are tagged pre-releases on npm) from the current branch.",
      "releases:official": "Produce a new official release of the RxPlayer from the current branch.",
      "update-version": "Update the version of the RxPlayer. Will update the codebase and perform every builds."
    }
  }
}
