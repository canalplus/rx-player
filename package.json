{
  "name": "rx-player",
  "author": "Canal+",
  "version": "3.28.0",
  "description": "Canal+ HTML5 Video Player",
  "main": "./dist/rx-player.js",
  "keywords": [
    "dash",
    "eme",
    "hss",
    "html5",
    "mediasource",
    "mse",
    "reactive",
    "rx",
    "rxjs",
    "smooth",
    "streaming",
    "typescript",
    "video"
  ],
  "browser": "./dist/rx-player.js",
  "homepage": "https://github.com/canalplus/rx-player",
  "bugs": "https://github.com/canalplus/rx-player/issues",
  "license": "Apache-2.0",
  "sideEffects": false,
  "scripts": {
    "build": "webpack --progress --config webpack.config.js --env production",
    "build:multi": "npm run build:multi:main && npm run build:multi:worker",
    "build:multi:main": "esbuild ./src/main/index.ts --bundle --outfile=dist/multithread/main.js --define:__ENVIRONMENT__=\"{ \\\"PRODUCTION\\\": 0, \\\"DEV\\\": 1, \\\"CURRENT_ENV\\\": 1 }\"",
    "build:multi:worker": "esbuild ./src/worker/index.ts --bundle --outfile=dist/multithread/worker.js --define:__ENVIRONMENT__=\"{ \\\"PRODUCTION\\\": 0, \\\"DEV\\\": 1, \\\"CURRENT_ENV\\\": 1 }\"",
    "build:all": "npm run build && npm run build:min && npm run build:wasm:release && npm run build:modular",
    "build:min": "webpack --progress --config webpack.config.js --env minify --env production",
    "build:min:report": "webpack --progress --config webpack.config.js --env minify --env production --env reportSize",
    "build:modular": "./scripts/build/generate_build.js",
    "build:report": "webpack --progress --config webpack.config.js --env production --env reportSize",
    "build:rxp:all": "npm run build && npm run build:min && npm run build:modular",
    "build:watch": "webpack --progress --config webpack.config.js -w --env production",
    "build:min:watch": "webpack --progress --config webpack.config.js -w --env production --env minify",
    "build:wasm:debug": "cd ./src/parsers/manifest/dash/wasm-parser && cargo build --target wasm32-unknown-unknown && cp target/wasm32-unknown-unknown/debug/mpd_node_parser.wasm ../../../../../dist/mpd-parser.wasm",
    "build:wasm:release": "cd ./src/parsers/manifest/dash/wasm-parser && cargo build --target wasm32-unknown-unknown --release && wasm-opt -O3 -o ../../../../../dist/mpd-parser.wasm target/wasm32-unknown-unknown/release/mpd_node_parser.wasm && cd ../../../../../ && npm run wasm-strip",
    "certificate": "./scripts/generate_certificate",
    "check": "npm run check:types && npm run lint",
    "check:all": "npm run check:types && npm run lint && npm run lint:demo && npm run lint:tests && npm run test:unit && npm run test:integration && npm run test:memory && node -r esm ./scripts/check_nodejs_import_compatibility.js",
    "check:appveyor": "npm run check:types && npm run lint && npm run lint:demo && npm run lint:tests && npm run test:appveyor",
    "check:types": "tsc --noEmit --project .",
    "check:types:watch": "tsc --noEmit --watch --project .",
    "demo": "node ./scripts/generate_full_demo.js --production-mode",
    "demo:min": "node ./scripts/generate_full_demo.js --production-mode --minify",
    "demo:watch": "node ./scripts/generate_full_demo.js --watch --production-mode",
    "doc": "rm -rf doc/generated; node ./scripts/doc-generator/index.js doc/ doc/generated \"$(cat VERSION)\"",
    "lint": "eslint src -c .eslintrc.js",
    "lint:demo": "eslint demo/full/scripts",
    "lint:tests": "eslint tests/**/*.js --ignore-pattern '/tests/performance/bundle*'",
    "list": "node scripts/list-npm-scripts.js",
    "prepublishOnly": "npm run build:modular",
    "standalone": "node ./scripts/run_standalone_demo.js",
    "start": "node ./scripts/start_demo_web_server.js",
    "start:wasm": "node ./scripts/start_demo_web_server.js --include-wasm",
    "s": "node ./scripts/start_demo_web_server.js --fast",
    "s:wasm": "node ./scripts/start_demo_web_server.js --fast --include-wasm",
    "wasm-strip": "node scripts/wasm-strip.js dist/mpd-parser.wasm",
    "test:appveyor": "npm run test:unit && npm run test:memory",
    "test:integration": "node tests/integration/run.js --bchromehl --bfirefoxhl",
    "test:integration:appveyor": "node --max-old-space-size=2048 ./tests/integration/run.js --bchromehl",
    "test:integration:chrome": "node tests/integration/run.js --bchrome",
    "test:integration:chrome:watch": "node tests/integration/run.js --bchrome --watch",
    "test:integration:coverage": "node tests/integration/run.js --bchromehl --bfirefoxhl --coverage",
    "test:integration:firefox": "node tests/integration/run.js --bfirefox",
    "test:integration:firefox:watch": "node tests/integration/run.js --bfirefox --watch",
    "test:memory": "node tests/memory/run.js --bchromehl",
    "test:memory:chrome:watch": "node tests/memory/run.js --bchrome --watch",
    "test:unit": "jest",
    "test:unit:coverage": "jest --coverage",
    "update-version": "npm run version --git-tag-version=false",
    "version": "./scripts/update-version"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/canalplus/rx-player.git"
  },
  "dependencies": {
    "next-tick": "1.1.0",
    "rxjs": "7.4.0"
  },
  "devDependencies": {
    "@babel/core": "7.18.5",
    "@babel/plugin-transform-runtime": "7.18.5",
    "@babel/preset-env": "7.18.2",
    "@babel/preset-react": "7.17.12",
    "@types/chai": "4.3.1",
    "@types/jest": "27.5.1",
    "@types/mocha": "9.1.1",
    "@types/node": "17.0.42",
    "@types/sinon": "10.0.11",
    "@typescript-eslint/eslint-plugin": "5.27.1",
    "@typescript-eslint/eslint-plugin-tslint": "5.27.1",
    "@typescript-eslint/parser": "5.27.1",
    "arraybuffer-loader": "1.0.8",
    "babel-loader": "8.2.5",
    "chai": "4.3.6",
    "cheerio": "1.0.0-rc.11",
    "core-js": "3.22.8",
    "esbuild": "0.14.43",
    "eslint": "8.17.0",
    "eslint-plugin-import": "2.26.0",
    "eslint-plugin-jsdoc": "39.3.2",
    "eslint-plugin-react": "7.30.0",
    "esm": "3.2.25",
    "express": "4.18.1",
    "highlight.js": "11.5.1",
    "html-entities": "2.3.3",
    "jest": "27.5.1",
    "karma": "6.3.20",
    "karma-chrome-launcher": "3.1.1",
    "karma-firefox-launcher": "2.1.2",
    "karma-mocha": "2.0.1",
    "karma-webpack": "5.0.0",
    "markdown-it": "13.0.1",
    "mocha": "10.0.0",
    "mocha-loader": "5.1.5",
    "raw-loader": "4.0.2",
    "react": "18.1.0",
    "react-dom": "18.1.0",
    "regenerator-runtime": "0.13.9",
    "rimraf": "3.0.2",
    "semver": "7.3.7",
    "sinon": "14.0.0",
    "terser-webpack-plugin": "5.3.3",
    "ts-jest": "27.1.5",
    "ts-loader": "9.3.0",
    "tslint": "6.1.3",
    "typescript": "4.7.3",
    "webpack": "5.73.0",
    "webpack-bundle-analyzer": "4.5.0",
    "webpack-cli": "4.10.0"
  },
  "scripts-list": {
    "Build a demo page (e.g. to test a code change)": {
      "start": "Build the \"full\" demo (with a UI) with the non-minified RxPlayer and serve it on a local server. Re-build on file updates.",
      "start:wasm": "Build the \"full\" demo (with a UI) with the non-minified RxPlayer including the DASH WebAssembly MPD parser and serve it on a local server. Re-build on file updates.",
      "s": "Very fast version of `start` which does not perform type-checking. This script can be useful for quick testing",
      "s:wasm": "Very fast version of `start:wasm` which does not perform type-checking. This script can be useful for quick testing",
      "demo": "Build the demo in demo/bundle.js",
      "demo:min": "Build the demo and minify it in demo/bundle.js",
      "demo:watch": "Build the demo in demo/bundle.js each times the files update.",
      "standalone": "Build and launch the \"standalone\" demo (without any UI) on a local server. Re-build on file updates.",
      "certificate": "Generate a certificate to be able to use HTTPS locally for the demo pages (`npm run start` and `npm run standalone` will then listen to HTTPS requests through a communicated port)"
    },
    "Type-check or lint the current code": {
      "check": "Check the validity of the src directory by running the type checker and linter on it",
      "check:all": "Check the validity of the whole project by running linters, type checkers and every tests",
      "check:types": "Check TypeScript typings in src",
      "check:types:watch": "Check TypeScript typings in src each time files change",
      "lint": "Lint rx-player source files",
      "lint:demo": "Lint demo source files",
      "lint:tests": "Lint integration tests source files"
    },
    "Run tests": {
      "Integration tests (test the whole API)": {
        "test:integration": "Launch integration tests in multiple browser environments",
        "test:integration:chrome": "Launch integration tests in a Chrome browser.",
        "test:integration:chrome:watch": "Launch integration tests in Chrome each times the files update",
        "test:integration:coverage": "Launch integration tests in multiple browser environments and produce a coverage report in tests/integration/coverage",
        "test:integration:firefox": "Launch integration tests in a Firefox browser.",
        "test:integration:firefox:watch": "Launch integration tests in Firefox each times the files update"
      },
      "Unit tests (test particular functions)": {
        "test:unit": "Launch unit tests",
        "test:unit:coverage": "Launch unit tests and produce a coverage report"
      },
      "Memory tests (test memory usage to avoid memory leaks)": {
        "test:memory": "Launch memory tests",
        "test:memory:chrome:watch": "Launch memory tests in Chrome each times the files update"
      }
    },
    "Build the player or one of its sub-parts": {
      "Modular builds (then imported through the rx-player/minimal path)": {
        "build:modular": "Build the modular build of the rx-player and create corresponding files and directories."
      },
      "Legacy builds (bundles)": {
        "build": "Build the player in dist/rx-player.js",
        "build:min": "Build the player and minify it in dist/rx-player.min.js",
        "build:min:report": "Build the player then minify it in dist/rx-player.min.js and display a report on its size",
        "build:min:watch": "Build the player in dist/rx-player.js each times the files update",
        "build:report": "Build the player in dist/rx-player.js and display a report on its size",
        "build:watch": "Build the player as a minified version in dist/rx-player.min.js each times the files update"
      },
      "WebAssembly MPD parser builds (needs Rust, Cargo and binaryen)": {
        "build:wasm:debug": "Build the DASH MPD parser written in rust as WebAssembly into debug mode, and output the result as dist/mpd-parser.wasm",
        "build:wasm:release": "Build the DASH MPD parser written in rust as WebAssembly into release mode, and output the result as dist/mpd-parser.wasm"
      },
      "Combinations of multiple builds": {
        "build:all": "Perform all possible builds of the player (regular RxPlayer builds and the WebAssembly DASH MPD parser release build).",
        "build:rxp:all": "Perform all possible builds of the RxPlayer main code (that is, excluding the WebAssembly DASH MPD parser build)."
      }
    },
    "Build the documentation pages": {
      "doc": "Generate the HTML documentation in doc/generated/pages"
    },
    "Update the RxPlayer's version": {
      "update-version": "Update the version to the string given in argument (example: `npm run update-version 3.8.0`). Will update the codebase and perform every builds."
    }
  }
}
