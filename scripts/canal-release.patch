diff --git a/src/parsers/texttracks/ttml/html/apply_extent.ts b/src/parsers/texttracks/ttml/html/apply_extent.ts
index 5772fa8fb..eb3a051e4 100644
--- a/src/parsers/texttracks/ttml/html/apply_extent.ts
+++ b/src/parsers/texttracks/ttml/html/apply_extent.ts
@@ -54,7 +54,14 @@ export default function applyExtent(
         secondExtent[2] === "%" ||
         secondExtent[2] === "em")
     {
-      element.style.height = secondExtent[1] + secondExtent[2];
+      const toNum = Number(secondExtent[1]);
+      if (secondExtent[2] === "%" && !isNaN(toNum) &&
+          (toNum < 0 || toNum > 100))
+      {
+        element.style.width = "80%";
+      } else {
+        element.style.height = secondExtent[1] + secondExtent[2];
+      }
     } else if (secondExtent[2] === "c") {
       addClassName(element, "proportional-style");
       element.setAttribute("data-proportional-height", secondExtent[1]);
diff --git a/src/parsers/texttracks/ttml/html/apply_line_height.ts b/src/parsers/texttracks/ttml/html/apply_line_height.ts
index 4f727229a..253aa1a72 100644
--- a/src/parsers/texttracks/ttml/html/apply_line_height.ts
+++ b/src/parsers/texttracks/ttml/html/apply_line_height.ts
@@ -14,16 +14,15 @@
  * limitations under the License.
  */
 
-import { addClassName } from "../../../../compat/add_class_name";
 import log from "../../../../log";
 import { REGXP_LENGTH } from "../regexps";
 
 /**
- * @param {HTMLElement} element
+ * @param {HTMLElement} _element
  * @param {string} lineHeight
  */
 export default function applyLineHeight(
-  element : HTMLElement,
+  _element : HTMLElement,
   lineHeight : string
 ) : void {
   const trimmedLineHeight = lineHeight.trim();
@@ -40,10 +39,10 @@ export default function applyLineHeight(
       firstLineHeight[2] === "%" ||
       firstLineHeight[2] === "em")
   {
-    element.style.lineHeight = firstLineHeight[1] + firstLineHeight[2];
+    // element.style.lineHeight = firstLineHeight[1] + firstLineHeight[2];
   } else if (firstLineHeight[2] === "c") {
-    addClassName(element, "proportional-style");
-    element.setAttribute("data-proportional-line-height", firstLineHeight[1]);
+    // addClassName(element, "proportional-style");
+    // element.setAttribute("data-proportional-line-height", firstLineHeight[1]);
   } else {
     log.warn("TTML Parser: unhandled lineHeight unit:", firstLineHeight[2]);
   }
diff --git a/src/parsers/texttracks/ttml/html/apply_origin.ts b/src/parsers/texttracks/ttml/html/apply_origin.ts
index 01a205aad..91d69fa3c 100644
--- a/src/parsers/texttracks/ttml/html/apply_origin.ts
+++ b/src/parsers/texttracks/ttml/html/apply_origin.ts
@@ -53,7 +53,15 @@ export default function applyOrigin(
         secondOrigin[2] === "%" ||
         secondOrigin[2] === "em")
     {
-      element.style.top = secondOrigin[1] + secondOrigin[2];
+      const toNum = Number(secondOrigin[1]);
+      if (secondOrigin[2] === "%" && !isNaN(toNum) &&
+          (toNum < 0 || toNum > 100))
+      {
+        element.style.bottom = "5%";
+        element.style.left = "10%";
+      } else {
+        element.style.top = secondOrigin[1] + secondOrigin[2];
+      }
     } else if (secondOrigin[2] === "c") {
       addClassName(element, "proportional-style");
       element.setAttribute("data-proportional-top", secondOrigin[1]);
