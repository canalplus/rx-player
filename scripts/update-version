#!/bin/bash

# Update version
# ==============
#
# This script updates the version number in files where it is indicated and
# builds the rx-player for this new version.
#
# /!\ It does not create a new git tag
#
# To use it:
#
#   1. Be sure that you're on the branch corresponding to the next version.
#
#   2. Call this script followed with the version number in the
#      `MAJOR.MINOR.PATCH` format (e.g. `./update-version 3.22.0`).
#
#   3. Wait for all the script to finish and stay attentive to what it says
#
#   4. That's it!

set -e

version=$1

sed -i.bak -e "s/\/\\* PLAYER_VERSION \\*\/\"\(.*\)\";/\/* PLAYER_VERSION *\/\"${version}\";/g" src/core/api/public_api.ts && rm src/core/api/public_api.ts.bak
sed -i.bak -e "s/\"version\":\s*\"[0-9]\+\.[0-9]\+\.[0-9]\+[^\"]*\"/\"version\": \"${version}\"/g" package.json && rm package.json.bak
sed -i.bak -e "s/sonar\.projectVersion= *.*/sonar.projectVersion=${version}/g" sonar-project.properties && rm sonar-project.properties.bak
echo $version > VERSION

npm install
npm run build:all

echo "creating types for legacy code bases..."
rm -f dist/rx-player.d.ts rx-player.min.d.ts
echo "${copyright_text}
import RxPlayer from \"./es2017/index\";
export default RxPlayer;" | tee dist/rx-player.d.ts dist/rx-player.min.d.ts > /dev/null
